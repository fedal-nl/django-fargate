on:
    push:
      branches: [main]

name: Deploy Demo App on ECS
env:
AWS_REGION: eu-central-1 # set this to your preferred AWS region, e.g. us-west-1
ECR_REPOSITORY: 302305848501.dkr.ecr.eu-central-1.amazonaws.com/django-fargat-app # set this to your Amazon ECR repository name
ECS_SERVICE: DjangoFargateService_v8 # set this to your Amazon ECS service name
ECS_CLUSTER: djangoFargateCluster # set this to your Amazon ECS cluster name
ECS_TASK_DEFINITION: DjangoFargateTask_v8-revision1-AWS-CLI-input.json # set this to the path to your Amazon ECS task definition
CONTAINER_NAME: API-v13
jobs:
    deploy:
      name: Deploy
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout
          uses: actions/checkout@v2
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
  
        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: v1.4
          run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t django-fargat-app:$IMAGE_TAG .
            docker tag django-fargat-app:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG
            # docker build --build-arg prod=true --build-arg NEXT_PUBLIC_HELLO_WORLD="${{ secrets.NEXT_PUBLIC_HELLO_WORLD }}" --build-arg SOME_OTHER_VARIABLE="${{ secrets.SOME_OTHER_VARIABLE }}" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REPOSITORY:$IMAGE_TAG
            # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}
  
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true